// node_modules/vue-near/src/index.js
function getConfig(env, options = {}) {
  const config = {
    ...options,
    appTitle: options.appTitle || "NEAR",
    contractName: options.contractName || "test.near"
  };
  switch (env) {
    case "production":
    case "mainnet":
      return {
        ...config,
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        explorerUrl: "https://explorer.near.org",
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org"
      };
    case "development":
    case "testnet":
      return {
        ...config,
        networkId: "default",
        nodeUrl: "https://rpc.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org"
      };
    case "betanet":
      return {
        ...config,
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        explorerUrl: "https://explorer.betanet.near.org",
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org"
      };
    case "local":
      return {
        ...config,
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet"
      };
    case "test":
    case "ci":
      return {
        ...config,
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        masterAccount: "test.near"
      };
    case "ci-betanet":
      return {
        ...config,
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        masterAccount: "test.near"
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}
var VueNear = class {
  constructor(env, config) {
    if (!window || !window.nearApi)
      return;
    this.nearApi = { ...window.nearApi };
    this.config = getConfig(env, config);
    this.near = null;
    this.keystore = null;
    this.user = null;
    return this;
  }
  async loadNearProvider() {
    this.keystore = new this.nearApi.keyStores.BrowserLocalStorageKeyStore(window.localStorage, "nearlib:keystore:");
    this.near = await this.nearApi.connect(Object.assign({ deps: { keyStore: this.keystore } }, this.config));
    return this;
  }
  async loadAccount() {
    this.walletConnection = new this.nearApi.WalletConnection(this.near);
    this.user = new this.nearApi.WalletAccount(this.near);
    if (this.walletConnection.getAccountId()) {
      this.user.accountId = this.walletConnection.getAccountId();
      this.user.balance = (await this.walletConnection.account().state()).amount;
    }
    return this;
  }
  async loginAccount() {
    if (this.user && this.user.isSignedIn())
      return this.user;
    const appTitle = this.config.appTitle || "NEAR";
    await this.user.requestSignIn(this.config.contractName, appTitle);
    return this.loadAccount();
  }
  async logoutAccount() {
    this.walletConnection = new this.nearApi.WalletConnection(this.near);
    this.user = new this.nearApi.WalletAccount(this.near);
    await this.user.signOut();
    this.keystore = null;
    this.user = null;
  }
  async getContractInstance(contract_id, abiMethods) {
    if (!this.user || !this.user.accountId)
      return;
    const account = this.walletConnection.account();
    const abi = {
      changeMethods: [],
      viewMethods: [],
      ...abiMethods
    };
    return new this.nearApi.Contract(account, contract_id, { ...abi, sender: account.accountId });
  }
};
var src_default = {
  install: async (app, { env, config }) => {
    app.config.globalProperties.$near = await new VueNear(env, config);
    await app.config.globalProperties.$near.loadNearProvider();
    await app.config.globalProperties.$near.loadAccount();
    app.provide("$user", app.config.globalProperties.$near.user);
    app.config.globalProperties.$nearInit = () => {
      return new VueNear(env, config).loadNearProvider();
    };
  }
};

// dep:vue-near
var vue_near_default = src_default;
export {
  VueNear,
  vue_near_default as default,
  getConfig
};
//# sourceMappingURL=vue-near.js.map
